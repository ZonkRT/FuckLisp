(defparameter tree (make-hash-table))(defun family()
(defun split-space(string)
  (loop for i = 0 then (1+j)
        as j = (position #\Space string :start i)
        collect subseq string i j)
  while j))

(defstruct person
	name 
	(parents (:type (:list))))

(let ((in (open "location" :if-does-not-exist nil)))
  (when in
    (loop for line = (read-line in nil)
          while line do (
                         (defparamater list (split-space line))
                         (if (eq (FIRST(list)) 'e)
                             (if = length(list) 4
                               (if eq (gethash (SECOND(list)) tree) nil 
                                 (setf p1 (make-person :name SECOND(list)))
                                 (setf (gethash (SECOND(list)) tree) p1))
                                  
                               (if eq (gethash (THIRD(list)) tree) nil
                                 (setf p2 (make-person :name THIRD(list)))
                                 (setf (gethash (THIRD(list)) tree) p2))

                               (if eq (gethash (FOURTH(list)) tree) nil
                                 (setf p3 (make-person :name FOURTH(list)
						                                           :parents cons(SECOND(list) THIRD(list))))
                                 (setf (gethash (FOURTH(list)) tree) p3)
)))))))
